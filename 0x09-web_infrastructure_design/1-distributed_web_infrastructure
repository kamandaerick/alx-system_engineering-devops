Task 1: Distributed Web Infrastructure

This web infrastructure is an upgrade from the previous one which was simple (Just a single server). How is this an upgrade?
It consists of 3 identical servers
It consist of a load balancer (HAproxy)

Reasons for adding 2 more servers and a load balancer

The two additional servers introduced to the system are known as redundant servers. They serve as a backup in case the server in use fails so that our website can continue operating. Redundant or backup resources such as the two additional servers minimizes or prevents downtime in network systems. 

HAProxy stands for High Availability Proxy. It is a popular open source software TCP/HTTP load balancer and proxying solution. Its common use is to improve the performance and reliability of a server environment. It achieves this by distributing the workload across multiple servers. In my web infrastructure, the load balancer is used to distribute HTTP requests across the 3 servers ensuring that the system performance is high and cannot fail in case one server fails. In summary, HAProxy improves speed and performance by distributing workload across the three servers. 

The distribution algorithm that my load balancer is configured with is predictive load balancing which monitors the performance of each of the three servers and directs requests to the one whose performance is highest at any given time. This algorithm combines the fastest and least connections algorithms hence the best. 

Active-Active and Active-PAssive Load Balancing

In active-active load balancing, all servers are up and running at any given time and workload is distributed among them based on a particular algorithm such as fastest, least connections, observed, predictive, and round robin. Active-passive on the other hand is a set up in which one server remains active handling all workload while the passive server remains on standby. If the active one fails, the passive one takes over making sure there is no interruption. 

The system I have designed is an active-active one because all servers are up and running at any given time and they handle requests based on what the load balancer directs to them. 

Working of a database primary-replica (master-slave)
A master-slave is a database architecture that is divided into a master database and slave databases. The slave database serves as the back up for the master database. The master database is used for write operations but read operations are spread among multiple slave databases. The master-slave databases may have asynchronous or synchronous replication. In synchronous replication, changes made on the master database reflect immediately on the slave databases. In asynchronous replication, changes made on the master database are queued up and written later on the save ones. 

The master database is also called the primary node. It handles all write operations such as insert, update, and delete. It is the one that maintains the primary copy of data. The slave databases are known as replica or secondary nodes. They are copies of the data contained in the primary node. They only handle read operations. 

My architecture is still lacking salve databases (replicas/secondary dbs)

Possible Issues

The possible areas of SPOF in this structure are failures at the individual servers such as web server, application server, and database server from which all the three servers depend.
The absence of a firewall and not using HTTPS makes my architecture vulnerable because the requests to the server and responses are not protected. They can be intercepted and read by anybody. It is also impossible to filter and control incoming traffic because that function is carried out by a firewall. 
My system also lacks monitoring. It is therefore impossible for me to know when the system is attacked or is performing poorly. 

Link
https://live.staticflickr.com/65535/53300952356_6249150916_m.jpg
